// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/19/2024 09:09:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SCH
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SCH_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] BN;
reg Validate;
// wires                                               
wire D00;
wire D01;
wire D02;
wire D03;
wire D04;
wire D05;
wire D06;
wire D10;
wire D11;
wire D012;
wire D13;
wire D14;
wire D15;
wire D16;
wire Greater;
wire Lower;

// assign statements (if any)                          
SCH i1 (
// port map - connection between master ports and signals/registers   
	.BN(BN),
	.D00(D00),
	.D01(D01),
	.D02(D02),
	.D03(D03),
	.D04(D04),
	.D05(D05),
	.D06(D06),
	.D10(D10),
	.D11(D11),
	.D012(D012),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.D16(D16),
	.Greater(Greater),
	.Lower(Lower),
	.Validate(Validate)
);
initial 
begin 
#1600000 $finish;
end 
// BN[ 5 ]
initial
begin
	BN[5] = 1'b1;
	BN[5] = #160000 1'b0;
	BN[5] = #160000 1'b1;
	BN[5] = #160000 1'b0;
	BN[5] = #800000 1'b1;
	BN[5] = #160000 1'b0;
end 
// BN[ 4 ]
initial
begin
	BN[4] = 1'b1;
	BN[4] = #160000 1'b0;
	BN[4] = #320000 1'b1;
	BN[4] = #160000 1'b0;
	BN[4] = #480000 1'b1;
end 
// BN[ 3 ]
initial
begin
	BN[3] = 1'b0;
	BN[3] = #160000 1'b1;
	BN[3] = #160000 1'b0;
	BN[3] = #320000 1'b1;
	BN[3] = #320000 1'b0;
	BN[3] = #160000 1'b1;
	BN[3] = #320000 1'b0;
end 
// BN[ 2 ]
initial
begin
	BN[2] = 1'b1;
	BN[2] = #160000 1'b0;
	BN[2] = #320000 1'b1;
	BN[2] = #160000 1'b0;
	BN[2] = #640000 1'b1;
	BN[2] = #160000 1'b0;
end 
// BN[ 1 ]
initial
begin
	BN[1] = 1'b1;
	BN[1] = #320000 1'b0;
	BN[1] = #480000 1'b1;
	BN[1] = #160000 1'b0;
	BN[1] = #160000 1'b1;
	BN[1] = #160000 1'b0;
	BN[1] = #160000 1'b1;
end 
// BN[ 0 ]
initial
begin
	BN[0] = 1'b1;
	BN[0] = #480000 1'b0;
	BN[0] = #640000 1'b1;
	BN[0] = #160000 1'b0;
end 

// Validate
initial
begin
	Validate = 1'b1;
	Validate = #200000 1'b0;
	Validate = #880000 1'b1;
	Validate = #240000 1'b0;
end 
endmodule

