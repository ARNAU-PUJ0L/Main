// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2024 12:23:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Converter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Converter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Bn0;
reg BN1;
reg BN2;
// wires                                               
wire G0;
wire G1;
wire G2;

// assign statements (if any)                          
Converter i1 (
// port map - connection between master ports and signals/registers   
	.Bn0(Bn0),
	.BN1(BN1),
	.BN2(BN2),
	.G0(G0),
	.G1(G1),
	.G2(G2)
);
initial 
begin 
#1000000 $finish;
end 

// Bn0
initial
begin
	Bn0 = 1'b0;
	Bn0 = #400000 1'b1;
	Bn0 = #400000 1'b0;
end 

// BN1
initial
begin
	repeat(2)
	begin
		BN1 = 1'b0;
		BN1 = #200000 1'b1;
		# 200000;
	end
	BN1 = 1'b0;
end 

// BN2
always
begin
	BN2 = 1'b0;
	BN2 = #100000 1'b1;
	#100000;
end 
endmodule

